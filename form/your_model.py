# -*- coding: utf-8 -*-
"""your_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10A1ZE93E88KM78V5Q01sXFdY-kvfuVHS
"""



# Commented out IPython magic to ensure Python compatibility.
## Import the relevant libraries into the environment
import numpy as np                ## linear algebra
import pandas as pd               ## data processing, dataset file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt   ## data visualization & graphical plotting
import seaborn as sns             ## to visualize random distributions
import plotly.express as px       ## data visualization & graphical plotting
# %matplotlib inline

pd.options.display.float_format = '{:.2f}'.format

import warnings                    ## Filter warnings
warnings.filterwarnings('ignore')

## Load the dataset
df = pd.read_csv("indian_restaurants.csv")

## Check a few records in the dataset that we just loaded
df.head(5)



## Check the dataset shape, duplicate entries, and missing values
print(f'\033[94mNumber of records/rows & features/columns in the dataset are: {df.shape}')
print(f'\033[94mNumber of duplicate entries in the dataset are: {df.duplicated().sum()}')
print(f'\033[94mNumber missing values in the dataset are: {sum(df.isna().sum())}')

## Have a glance at the dataframe with info() function
df.info()

## Have a glance at the dataframe with describe() function
df.describe(include='all').transpose()

##Let's check the location names for any duplications, mis-spellings, errors
df.location.unique()

## We club 'NCR' into 'Delhi NCR'
df.replace({'location' : {'NCR':'Delhi NCR'}}, inplace=True)
## Check the correction made
df['location'].unique()

## Let's have a look at three primary parameters - Rating, Price, Delivery Time - through distribution plots
## We will use Histrograms and Box plots to visualise our data
sns.set(rc={'axes.facecolor':'none','axes.grid':False,'xtick.labelsize':13,'ytick.labelsize':13, 'figure.autolayout':True})
my_col = ('#40E0D0', '#D2B48C','#c7e9b4', '#EEE8AA','#00FFFF','#FAEBD7','#FF6347', '#FAFAD2', '#E0EEEE', '#C1CDCD', '#838B8B', '#D8BFD8','#F4A460','#F08080', '#EE82EE', '#4682B4','#6A5ACD', '#00C78C', '#FFB6C1', '#8B5F65')
my_pal = ('#c7e9b4', '#FAEBD7')

plt.subplots(figsize=(12,6))

plt.subplot(231)
plt.title('Rating : Histogram', color='#D2B48C', weight='bold', fontsize=14)
sns.histplot(df.rating, color="#D2B48C", alpha=1, kde = True)
plt.xlabel(None), plt.yticks([]), plt.ylabel(None)

plt.subplot(232)
plt.title('Average Price : Histogram', color='#D2B48C', weight='bold', fontsize=14)
sns.histplot(df.average_price, color="#D2B48C", alpha=1, kde = True)
plt.xlabel(None), plt.yticks([]), plt.ylabel(None)

plt.subplot(233)
plt.title('Average Delivery Time : Histogram', color='#D2B48C', weight='bold', fontsize=14)
sns.histplot(df['average _delivery_time'], color="#D2B48C", alpha=1, kde = True)
plt.xlabel(None), plt.yticks([]), plt.ylabel(None)

plt.subplot(234)
plt.title('Rating : Box Plot', color='green', weight='bold', fontsize=14)
sns.boxplot(df.rating, color="#c7e9b4", orient='h')
plt.xlabel(None), plt.ylabel(None), plt.yticks([])

plt.subplot(235)
plt.title('Average Price : Box Plot', color='green', weight='bold', fontsize=14)
sns.boxplot(df.average_price, color="#c7e9b4", orient='h')
plt.xlabel(None), plt.ylabel(None), plt.yticks([])

plt.subplot(236)
plt.title('Average Delivery Time : Box Plot', color='green', weight='bold', fontsize=14)
sns.boxplot(df['average _delivery_time'], color="#c7e9b4", orient='h')
plt.xlabel(None), plt.ylabel(None), plt.yticks([])

plt.show()

## Let's analyse key food type variables : South Indian, North Indian, and Biryani
## We'll use bar plots, pie charts, and violin plots for our anlaysis.

plt.subplots(figsize=(14,12))
plt.suptitle('Indian Restaurant Analysis by Cuisine - South Indian / North Indian / Biryani', weight='bold', color='green', fontsize=20)

plt.subplot(331)
plt.title('Restaurant Count - South Indian or Not', weight='bold', color='green', fontsize=14)
ax = sns.countplot(x=df['south_indian_or_not'], palette=my_col, saturation=0.2)
for p in ax.patches:
    ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.30, p.get_height()+150))
plt.xlabel(None), plt.ylabel(None), plt.yticks([])

plt.subplot(332)
plt.title('Restaurant Count - North Indian or Not',  weight='bold', color='green', fontsize=14)
ax = sns.countplot(x=df['north_indian_or_not'], palette=my_col, saturation=0.5)
for p in ax.patches:
    ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.30, p.get_height()+150))
plt.xlabel(None), plt.ylabel(None), plt.yticks([])

plt.subplot(333)
plt.title('Restaurant Count - Biryani or Not',  weight='bold', color='green', fontsize=14)
ax = sns.countplot(x=df['biryani_or_not'], palette=my_col, saturation=0.8)
for p in ax.patches:
    ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.30, p.get_height()+150))
plt.xlabel(None), plt.ylabel(None), plt.yticks([])

plt.subplot(334)
plt.title('Restaurant Count % - South Indian or Not ',  weight='bold', color='green', fontsize=14)
df['south_indian_or_not'].value_counts().plot(kind='pie', colors=my_col, legend=None, ylabel='', autopct='%1.1f%%')

plt.subplot(335)
plt.title('Restaurant  Count % - North Indian or Not',  weight='bold', color='green', fontsize=14)
df['north_indian_or_not'].value_counts().plot(kind='pie', colors=my_col, legend=None, ylabel='', autopct='%1.1f%%')

plt.subplot(336)
plt.title('Restaurant  Count % - Biryani or Not',  weight='bold', color='green', fontsize=14)
df['biryani_or_not'].value_counts().plot(kind='pie', colors=my_col, legend=None, ylabel='', autopct='%1.1f%%')

plt.subplot(337)
plt.title('Avg Price - South Indian or Not: Violinplot',  weight='bold', color='green', fontsize=14)
sns.violinplot(x=df['south_indian_or_not'], y=df['average_price'], palette=my_col)
plt.xlabel(None), plt.ylabel(None)

plt.subplot(338)
plt.title('Avg Price - North Indian or Not: Violinplot',  weight='bold', color='green', fontsize=14)
sns.violinplot(x=df['north_indian_or_not'], y=df['average_price'], palette=my_col)
plt.xlabel(None), plt.ylabel(None)

plt.subplot(339)
plt.title('Avg Price - Biryani or Not: Violinplot',  weight='bold', color='green', fontsize=14)
sns.violinplot(x=df['biryani_or_not'], y=df['average_price'], palette=my_col)
plt.xlabel(None), plt.ylabel(None)

plt.show()

## Let's analyse key food type variables : Bakery, Fastfood, Streetfood
## We'll use bar plots, pie charts, and box plots for our anlaysis.

plt.subplots(figsize=(15,12))
plt.suptitle('Indian Restaurant Analysis by Format - Bakery / Fastfood / Streetfood', weight='bold', color='green', fontsize=20)

plt.subplot(331)
plt.title('Restaurant Count - Bakery or Not', weight='bold', color='green', fontsize=14)
ax = sns.countplot(y=df['bakery_or_not'], palette=my_pal, saturation=0.2)
for p in ax.patches:
    ax.annotate('{:.0f}'.format(p.get_width()),  (p.get_x() + p.get_width() + 200, p.get_y()+0.5))
plt.xlabel(None), plt.xticks([]), plt.ylabel(None)

plt.subplot(332)
plt.title('Restaurant Count - Fastfood or Not', weight='bold', color='green', fontsize=14)
ax = sns.countplot(y=df['fast_food_or_not'], palette=my_pal, saturation=0.4)
for p in ax.patches:
    ax.annotate('{:.0f}'.format(p.get_width()),  (p.get_x() + p.get_width() + 200, p.get_y()+0.5))
plt.xlabel(None), plt.xticks([]), plt.ylabel(None)

plt.subplot(333)
plt.title('Restaurant Count - Streetfood or Not', weight='bold', color='green', fontsize=14)
ax = sns.countplot(y=df['street_food'], palette=my_pal, saturation=0.6)
for p in ax.patches:
    ax.annotate('{:.0f}'.format(p.get_width()),  (p.get_x() + p.get_width() + 200, p.get_y()+0.5))
plt.xlabel(None), plt.xticks([]), plt.ylabel(None)

plt.subplot(334)
plt.title('Restaurant Count % - Bakery or Not', weight='bold', color='green', fontsize=14)
df['bakery_or_not'].value_counts().plot(kind='pie', colors=my_pal, legend=None, ylabel='', wedgeprops={'alpha':0.4}, autopct='%1.1f%%')

plt.subplot(335)
plt.title('Restaurant Count % - Fastfood or Not', weight='bold', color='green', fontsize=14)
df['fast_food_or_not'].value_counts().plot(kind='pie', colors=my_pal, legend=None, ylabel='', wedgeprops={'alpha':0.6, 'edgecolor' : 'green','linewidth': 1, 'antialiased': True}, autopct='%1.1f%%')

plt.subplot(336)
plt.title('Restaurant Count % - Streetfood or Not', weight='bold', color='green', fontsize=14)
df['street_food'].value_counts().plot(kind='pie', colors=my_pal, legend=None, ylabel='', wedgeprops={'alpha':0.8, 'edgecolor' : 'green','linewidth': 1, 'antialiased': True}, autopct='%1.1f%%')

plt.subplot(337)
plt.title('Average Price - Bakery or Not: Boxplot', weight='bold', color='green', fontsize=14)
sns.boxplot(x=df['bakery_or_not'], y=df['average_price'], palette=my_pal)
plt.xlabel(None), plt.ylabel(None)

plt.subplot(338)
plt.title('Average Price - Fastood or Not: Boxplot', weight='bold', color='green', fontsize=14)
sns.boxplot(x=df['fast_food_or_not'], y=df['average_price'], palette=my_pal)
plt.xlabel(None), plt.ylabel(None)

plt.subplot(339)
plt.title('Average Price - Streetood or Not: Boxplot', weight='bold', color='green', fontsize=14)
sns.boxplot(x=df['street_food'], y=df['average_price'], palette=my_pal)
plt.xlabel(None), plt.ylabel(None)

plt.show()

## Let's do some analysis with scatterplots
sc1 = ('#c7e9b4', '#00FFFF')
sc2 = ('#FAEBD7','#FF6347')

plt.subplots(figsize=(16,10))
plt.suptitle('Data Distribution in Numerical Features - Rating,  Average Price, & Average Delivery Time', weight='bold', color='green', fontsize=22)

plt.subplot(331)
plt.title('Rating vs Average Price', weight='bold',fontsize=15)
sns.scatterplot(x=df['rating'], y=df['average_price'],  color='#40E0D0')
plt.xlabel(None), plt.ylabel(None)

plt.subplot(332)
plt.title('Rating vs Average Delivery Time', weight='bold', fontsize=15)
sns.scatterplot(x=df['rating'], y=df['average _delivery_time'], color='#D2B48C')
plt.xlabel(None), plt.ylabel(None)

plt.subplot(333)
plt.title('Average Price vs Average Delivery Time', weight='bold', fontsize=15)
sns.scatterplot(x=df['average_price'], y=df['average _delivery_time'], color='#c7e9b4')
plt.xlabel(None), plt.ylabel(None)

plt.subplot(334)
plt.title('Rating vs Average Price Vs South Indian', weight='bold', fontsize=15)
sns.scatterplot(x=df['rating'], y=df['average_price'], hue=df['south_indian_or_not'], palette=sc1)
plt.xlabel(None), plt.ylabel(None)

plt.subplot(335)
plt.title('Rating vs Average Price Vs North Indian', weight='bold',fontsize=15)
sns.scatterplot(x=df['rating'], y=df['average_price'], hue=df['north_indian_or_not'], palette=sc1)
plt.xlabel(None), plt.ylabel(None)

plt.subplot(336)
plt.title('Rating vs Average Price Vs Biryani', weight='bold',fontsize=15)
sns.scatterplot(x=df['rating'], y=df['average_price'], hue=df['biryani_or_not'], palette=sc1)
plt.xlabel(None), plt.ylabel(None)

plt.subplot(337)
plt.title('Rating vs Average Price Vs Bakery', weight='bold',fontsize=15)
sns.scatterplot(x=df['rating'], y=df['average_price'], hue=df['bakery_or_not'], palette=sc2)
plt.xlabel(None), plt.ylabel(None)

plt.subplot(338)
plt.title('Rating vs Average Price Vs Fast Food', weight='bold',fontsize=15)
sns.scatterplot(x=df['rating'], y=df['average_price'], hue=df['fast_food_or_not'], palette=sc2)
plt.xlabel(None), plt.ylabel(None)

plt.subplot(339)
plt.title('Rating vs Average Price Vs Street food', weight='bold', fontsize=15)
sns.scatterplot(x=df['rating'], y=df['average_price'], hue=df['street_food'], palette=sc2)
plt.xlabel(None), plt.ylabel(None)

plt.show()



## Analysis by location (which is nothing but the city in which restaurant is located)
## Have a look at Restaurant count by location

sns.set_style("whitegrid")
plt.figure(figsize=(16,6))
plt.title('Indian Restaurant Analysis by Location - Restaurant Count by Location (City)', color='green', weight='bold', fontsize=22)
sns.countplot(x=df['location'], palette='Greens_r', saturation=0.4)
plt.xlabel(None), plt.xticks(rotation=90), plt.ylabel(None)
plt.show()

## Now we will do Location & Average Price analysis by Food Type (South Indian/North Indian/Biryani/Bakery/Streetfood/Fastfood)
plt.subplots(figsize=(18,16))
plt.suptitle('Location & Average Price Analysis by Cuisine & Format – South Indian / North Indian / Biryani / Bakery / Streetfood / Fastfood', color='green', weight='bold', fontsize=22)
plt.subplot(611)
sns.violinplot(x=df['location'], y=df['average_price'], hue=df['south_indian_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks([])
plt.subplot(612)
sns.boxplot(x=df['location'], y=df['average_price'], hue=df['north_indian_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks([])
plt.subplot(613)
sns.stripplot(x=df['location'], y=df['average_price'], hue=df['biryani_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks([])
plt.subplot(614)
sns.violinplot(x=df['location'], y=df['average_price'], hue=df['bakery_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks([])
plt.subplot(615)
sns.boxplot(x=df['location'], y=df['average_price'], hue=df['street_food'], palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks([])
plt.subplot(616)
sns.stripplot(x=df['location'], y=df['average_price'], hue=df['fast_food_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks(rotation=90)
plt.show()

## Now we will see the Top 20 Locations by Average Price and Rating
plt.subplots(figsize=(16,5))
sns.set_style("white")
plt.subplot(121)
plt.title('Top 20 Locations by Average Price', color='#8B5A2B', weight='bold', fontsize=16)
top20_avg_price_loc = df.groupby('location')['average_price'].mean().head(20).sort_values(ascending=False)
ax = top20_avg_price_loc.plot(kind='bar', color='#8B5A2B', alpha=0.5)

top20pric = (top20_avg_price_loc)
labels = [f"{t:.0f}" for t in top20pric]
ax.bar_label(ax.containers[0], labels=labels)

plt.yticks([]), plt.xlabel(None)
plt.gca().set_frame_on(False)

plt.subplot(122)
plt.title('Top 20 Locations by Rating', color='#FF6347', weight='bold', fontsize=16)
top20_avg_rating_loc = df.groupby('location')['rating'].mean().head(20).sort_values(ascending=False)
ax = top20_avg_rating_loc.plot(kind='bar', color='#FF6347', alpha=0.5)

top20rat = (top20_avg_rating_loc)
labels = [f"{t:.2f}" for t in top20rat]
ax.bar_label(ax.containers[0], labels=labels)

plt.yticks([]), plt.xlabel(None)
plt.gca().set_frame_on(False)

plt.show()

## Analysis by City Tier
## Indian cities are predominantly classified in to 3 Tiers, based on population and economic conditions
## We will create a new 'City Tier' column and populate it with using city (location) names we have in our dataset

df['City Tier'] = df['location'] ##Create a new 'City Tier' column by making a copy of 'location' column

## Next we populate the City Tiers based on location name (I took Microsoft Copilot's help to populate the City Tiers)
df['City Tier'].replace(['Ahmedabad', 'Bangalore', 'Chennai', 'Delhi NCR', 'Hyderabad', 'Kolkata', 'Mumbai', 'Pune'], 'Tier 1  Cities', inplace=True, regex=True)
df['City Tier'].replace(['Agra', 'Ajmer', 'Aligarh', 'Allahabad', 'Amravati', 'Amritsar', 'Asansol', 'Aurangabad', 'Bareilly', 'Belgaum', 'Bhavnagar', 'Bhiwandi', 'Bhopal', 'Bhubaneswar', 'Bikaner', 'Chandigarh', 'Coimbatore', 'Cuttack', 'Dehradun', 'Dhanbad', 'Durgapur', 'Erode', 'Faridabad', 'Firozabad', 'Ghaziabad', 'Gorakhpur', 'Guntur', 'Gurgaon', 'Guwahati', 'Gwalior', 'Hubli-Dharwad', 'Indore', 'Jabalpur', 'Jaipur', 'Jalandhar', 'Jammu', 'Jamnagar', 'Jamshedpur', 'Jhansi', 'Jodhpur', 'Kakinada', 'Kannur', 'Kanpur', 'Kochi', 'Kolhapur', 'Kollam', 'Kota', 'Kozhikode', 'Kurnool', 'Ludhiana', 'Lucknow', 'Madurai', 'Malappuram', 'Mangalore', 'Mathura', 'Meerut', 'Moradabad', 'Mysore', 'Nagpur', 'Nashik', 'Nellore', 'Noida', 'Patna', 'Pondicherry', 'Raipur', 'Rajahmundry', 'Rajkot', 'Ranchi', 'Rourkela', 'Salem', 'Sangli', 'Siliguri', 'Solapur', 'Srinagar', 'Surat', 'Thiruvananthapuram', 'Thrissur', 'Tiruchirappalli', 'Tirunelveli', 'Tiruppur', 'Udaipur', 'Ujjain', 'Vadodara', 'Varanasi', 'Vasai-Virar', 'Vijayawada', 'Visakhapatnam', 'Warangal', 'Trichy', 'Saharanpur', 'Trivandrum', 'Junagadh'], 'Tier 2 Cities', inplace=True, regex=True)
df['City Tier'].replace(['Alappuzha', 'Amritsar', 'Aurangabad', 'Bhagalpur', 'Bokaro Steel City', 'Brahmapur', 'Burdwan', 'Darbhanga', 'Davangere', 'Dharwad', 'Dharamshala', 'Gaya', 'Goa', 'Gorakhpur', 'Gulbarga', 'Haridwar', 'Jalgaon', 'Jhansi', 'Kalaburagi', 'Kharagpur', 'Kolhapur', 'Kumbakonam', 'Latur', 'Malegaon', 'Manali', 'Manipal', 'Motihari', 'Muzaffarnagar', 'Muzaffarpur', 'Nainital', 'Nanded', 'Navi Mumbai', 'Palakkad', 'Panchkula', 'Panipat', 'Patiala', 'Puducherry', 'Purulia', 'Rishikesh', 'Rohtak', 'Shimla', 'Sonepat', 'Tirupati', 'Tiruvannamalai', 'Udupi', 'Vellore', 'Gonda', 'Darjeeling'], 'Tier 3 Cities', inplace=True, regex=True)

print('\n', 'City Tier-Wise Restaurant Count')

df['City Tier'].value_counts()

## Now Let's visualise the City Tier data
plt.subplots(figsize=(15,8))
plt.suptitle('Indian Restaurant Analysis by City Tier - Tier 1, Tier 2, & Tier 3', weight='bold', color='green', fontsize=20)

plt.subplot(221)
labels = ['Tier 1  Cities', 'Tier 2 Cities', 'Tier 3 Cities']
my_xpl = [0.0, 0.0, 0.10]
ax = df['City Tier'].value_counts(normalize=True).reindex(labels).plot.pie(colors = my_col, counterclock=False,  startangle=180, explode=my_xpl, ylabel='', wedgeprops={'alpha':0.4, 'edgecolor' : 'red','linewidth': 0.5, 'antialiased': True},autopct='%1.1f%%')
plt.title('Restaurant Count (in %) by City Tier', color='green', weight='bold', fontsize=16)

plt.subplot(222)
ax = sns.countplot(y=df['City Tier'], palette=my_col, saturation=0.6, order=['Tier 1  Cities', 'Tier 2 Cities', 'Tier 3 Cities'])
for p in ax.patches:
    ax.annotate('{:.0f}'.format(p.get_width()),  (p.get_x() + p.get_width() + 100, p.get_y()+0.5))
plt.title('Restaurant Count by City Tier', color='green', weight='bold', fontsize=16)
plt.xlabel(None), plt.ylabel(None)
plt.gca().set_frame_on(False)

plt.subplot(223)
plt.title('City Tiers by Average Price', color='#8B5A2B', weight='bold', fontsize=16)
tier_avgprice = df.groupby('City Tier')['average_price'].mean()
ax = tier_avgprice.plot(kind='bar', color='#8B5A2B', alpha=0.5)

average = (tier_avgprice)
labels = [f"{a:.0f}" for a in average]
ax.bar_label(ax.containers[0], labels=labels)

plt.yticks([]), plt.xlabel(None), plt.xticks(rotation=0)
plt.gca().set_frame_on(False)

plt.subplot(224)
plt.title('City Tiers by Rating', color='#FF6347', weight='bold', fontsize=16)
tier_avgrating = df.groupby('City Tier')['rating'].mean()
ax = tier_avgrating.plot(kind='bar', color='#FF6347', alpha=0.5)

rating = (tier_avgrating)
labels = [f"{r:.2f}" for r in rating]
ax.bar_label(ax.containers[0], labels=labels)

plt.yticks([]), plt.xlabel(None), plt.xticks(rotation=0)
plt.gca().set_frame_on(False)

plt.show()

## Now we will do City Tier & Average Price analysis by Food Type (South Indian/North Indian/Biryani/Bakery/Streetfood/Fastfood)
plt.subplots(figsize=(18,16))
plt.suptitle('City Tier & Average Price Analysis by Cuisine & Format – South Indian / North Indian / Biryani / Bakery / Streetfood / Fastfood', color='green', weight='bold', fontsize=22)
plt.subplot(631)
sns.violinplot(x=df['City Tier'], y=df['average_price'], hue=df['south_indian_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None)
plt.subplot(632)
sns.boxplot(x=df['City Tier'], y=df['average_price'], hue=df['north_indian_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None)
plt.subplot(633)
sns.stripplot(x=df['City Tier'], y=df['average_price'], hue=df['biryani_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None)
plt.subplot(634)
sns.violinplot(x=df['City Tier'], y=df['average_price'], hue=df['bakery_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None)
plt.subplot(635)
sns.boxplot(x=df['City Tier'], y=df['average_price'], hue=df['street_food'], palette=my_col)
plt.xlabel(None), plt.ylabel(None)
plt.subplot(636)
sns.stripplot(x=df['City Tier'], y=df['average_price'], hue=df['fast_food_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None)

plt.show()



## Analysis by State/Union Territory (U.T)
## We will create a new 'State/U.T' column and populate it with using city names we have in our dataset
df['State/U.T'] = df['location']  ##Create a new 'State/U.T' column by making a copy of 'location' column

## Next we populate the Indian states based on city name
## (Again, I took Microsoft Copilot's help again, to populate cities by Indian state)
df['State/U.T'].replace(['Visakhapatnam', 'Vijayawada', 'Nellore', 'Guntur'], 'Andhra Pradesh', inplace=True, regex=True)
df['State/U.T'].replace(['Guwahati'], 'Assam', inplace=True, regex=True)
df['State/U.T'].replace(['Patna', 'Gaya', 'Darbhanga', 'Motihari'], 'Bihar', inplace=True, regex=True)
df['State/U.T'].replace(['Ahmedabad', 'Vadodara', 'Surat', 'Rajkot', 'Bhavnagar', 'Jamnagar', 'Junagadh'],'Gujarat', inplace=True, regex=True)
df['State/U.T'].replace(['Faridabad', 'Gurgaon'], 'Haryana', inplace=True, regex=True)
df['State/U.T'].replace(['Shimla', 'Dharamshala', 'Manali'], 'Himachal Pradesh', inplace=True, regex=True)
df['State/U.T'].replace(['Ranchi', 'Dhanbad', 'Jamshedpur'], 'Jharkhand', inplace=True, regex=True)
df['State/U.T'].replace(['Bangalore', 'Mangalore', 'Mysore', 'Manipal', 'Belgaum'], 'Karnataka', inplace=True, regex=True)
df['State/U.T'].replace(['Trivandrum', 'Palakkad', 'Thrissur', 'Alappuzha'], 'Kerala', inplace=True, regex=True)
df['State/U.T'].replace(['Bhopal', 'Indore', 'Jabalpur', 'Ujjain'], 'Madhya Pradesh', inplace=True, regex=True)
df['State/U.T'].replace(['Mumbai', 'Pune', 'Nagpur', 'Amravati', 'Nashik', 'Kolhapur', 'Jalgaon', 'Solapur', 'Aurangabad', 'Sangli'], 'Maharashtra', inplace=True, regex=True)
df['State/U.T'].replace(['Bhubaneswar', 'Cuttack'], 'Odisha', inplace=True, regex=True)
df['State/U.T'].replace(['Ludhiana', 'Jalandhar', 'Amritsar', 'Patiala'], 'Punjab', inplace=True, regex=True)
df['State/U.T'].replace(['Jaipur', 'Udaipur', 'Kota', 'Jodhpur', 'Bikaner', 'Ajmer'], 'Rajasthan', inplace=True, regex=True)
df['State/U.T'].replace(['Trichy', 'Chennai', 'Salem', 'Coimbatore', 'Vellore', 'Madurai', 'Tirunelveli'], 'Tamil Nadu', inplace=True, regex=True)
df['State/U.T'].replace(['Hyderabad', 'Warangal'], 'Telangana', inplace=True, regex=True)
df['State/U.T'].replace(['Lucknow', 'Kanpur', 'Agra', 'Varanasi', 'Allahabad', 'Meerut', 'Bareilly', 'Gorakhpur', 'Moradabad', 'Aligarh', 'Jhansi', 'Saharanpur', 'Gonda', 'Firozabad'], 'Uttar Pradesh', inplace=True, regex=True)
df['State/U.T'].replace(['Dehradun', 'Rishikesh', 'Haridwar', 'Nainital'], 'Uttarakhand', inplace=True, regex=True)
df['State/U.T'].replace(['Kolkata', 'Durgapur', 'Siliguri', 'Asansol', 'Kharagpur', 'Darjeeling'], 'West Bengal', inplace=True, regex=True)
df.replace({'State/U.T' : {'Raipur':'Chhattisgarh', 'Jammu' : 'Jammu and Kashmir'}}, inplace=True)

print('\n', 'State/U.T-Wise Restaurant Count')
df['State/U.T'].value_counts()

## Let's visualise the State / U.T data
plt.subplots(figsize=(15,12))
plt.suptitle('Indian Restaurant Analysis by State / Union Territory (U.T)', weight='bold', color='green', fontsize=20)

plt.subplot(221)
sns.countplot(y=df['State/U.T'], palette='Greens_r', saturation=0.4, order=df['State/U.T'].value_counts().index)
plt.title('Restaurant Count by State/U.T', color='green', weight='bold', fontsize=16)
plt.xlabel(None), plt.ylabel(None)
plt.gca().set_frame_on(False)

plt.subplot(222)
my_xpl = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10, 0.20, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60]
df['State/U.T'].value_counts().plot(kind='pie', subplots=True, colors=my_col, explode=my_xpl, legend=None, ylabel='', counterclock=False, startangle=270, wedgeprops={'alpha':0.4, 'edgecolor' : 'green','linewidth': 1, 'antialiased': True},autopct='%1.1f')
plt.title('Restaurant Count (in %) by State/U.T', color='green', weight='bold', fontsize=16)

plt.subplot(223)
plt.title('Top 10 States/U.T.s by Average Price', color='#8B5A2B', weight='bold', fontsize=16)
state_avgprice = df.groupby('State/U.T')['average_price'].mean().head(10).sort_values(ascending=False)
ax = state_avgprice.plot(kind='barh', color='#8B5A2B', alpha=0.5)

average = (state_avgprice)
labels = [f"{a:.0f}" for a in average]
ax.bar_label(ax.containers[0], labels=labels)

plt.ylabel(None), plt.xlabel(None), plt.xticks([])
plt.gca().set_frame_on(False)

plt.subplot(224)
plt.title('Top 10 States/U.T.s by Rating', color='#FF6347', weight='bold', fontsize=16)
state_avgrating = df.groupby('State/U.T')['rating'].mean().head(10).sort_values(ascending=False)
ax = state_avgrating.plot(kind='barh', color='#FF6347', alpha=0.5)

rating = (state_avgrating)
labels = [f"{r:.2f}" for r in rating]
ax.bar_label(ax.containers[0], labels=labels)

plt.ylabel(None), plt.xlabel(None), plt.xticks([])
plt.gca().set_frame_on(False)

plt.show()

plt.subplots(figsize=(18,14))
plt.suptitle('Location & Average Price Analysis by Cuisine & Format – South Indian / North Indian / Biryani / Bakery / Streetfood / Fastfood', color='green', weight='bold', fontsize=22)

plt.subplot(611)
sns.barplot(x=df['State/U.T'], y=df['average_price'], hue=df['south_indian_or_not'], errorbar=None, palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks([])

plt.subplot(612)
sns.violinplot(x=df['State/U.T'], y=df['average_price'], hue=df['north_indian_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks([])

plt.subplot(613)
sns.boxplot(x=df['State/U.T'], y=df['average_price'], hue=df['biryani_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks([])

plt.subplot(614)
sns.barplot(x=df['State/U.T'], y=df['average_price'], hue=df['bakery_or_not'], errorbar=None, palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks([])

plt.subplot(615)
sns.violinplot(x=df['State/U.T'], y=df['average_price'], hue=df['street_food'], palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks([])

plt.subplot(616)
sns.boxplot(x=df['State/U.T'], y=df['average_price'], hue=df['fast_food_or_not'], palette=my_col)
plt.xlabel(None), plt.ylabel(None), plt.xticks(rotation=90, fontsize=16)

plt.show()

## Analysis by Region (North India, South India, West India, Central India, East India)
## We will create a new 'Region' column and populate it with using state names we created in our previous step
df['Region'] = df['State/U.T'] ##Create a new 'Region' column by making a copy of 'State/U.T' column

## Next we populate the Regions in India based on State/U.T names
## (One more time, I took Microsoft Copilot's help, to populate Indian states by Region)
df['Region'].replace(['Chandigarh', 'Haryana', 'Himachal Pradesh', 'Jammu and Kashmir', 'Delhi NCR', 'Punjab', 'Rajasthan', 'Uttar Pradesh', 'Uttarakhand'], 'North India', inplace=True, regex=True)
df['Region'].replace(['Andhra Pradesh', 'Karnataka', 'Kerala', 'Puducherry', 'Tamil Nadu', 'Telangana'], 'South India', inplace=True, regex=True)
df['Region'].replace(['Goa', 'Gujarat', 'Maharashtra'], 'West India', inplace=True, regex=True)
df['Region'].replace(['Chhattisgarh', 'Madhya Pradesh'], 'Central India', inplace=True, regex=True)
df['Region'].replace(['Assam', 'Bihar', 'Jharkhand', 'Odisha', 'West Bengal'], 'East India', inplace=True, regex=True)
print('\n', 'Region-Wise Restaurant Count')
df['Region'].value_counts()

## Now we will visualise the Region data
plt.subplots(figsize=(14,10))
plt.suptitle('Indian Restaurant Analysis by Region', weight='bold', color='green', fontsize=20)

plt.subplot(221)
ax = sns.countplot(x=df['Region'], palette=my_col, saturation=0.6, order=['Central India', 'East India', 'North India', 'South India', 'West India'])
for p in ax.patches:
    ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.30, p.get_height()+40))
plt.xlabel(None), plt.ylabel(None), plt.yticks([])
plt.title('Restaurant Count by Region', color='green', weight='bold', fontsize=16)
plt.gca().set_frame_on(False)

plt.subplot(222)
labels=['Central India', 'East India', 'North India', 'South India', 'West India']
my_xpl = [0.0, 0.05, 0.05, 0.0, 0.0]
ax = df['Region'].value_counts(normalize=True).reindex(labels).plot.pie(colors = my_col, counterclock=False,  startangle=90, explode=my_xpl, ylabel='', wedgeprops={'alpha':0.6, 'edgecolor' : 'red','linewidth': 0.5, 'antialiased': True},autopct='%1.1f%%')
plt.title('Restaurant Count (in %) by Region', color='green', weight='bold', fontsize=16)

plt.subplot(223)
plt.title('Average Price by Region', color='#8B5A2B', weight='bold', fontsize=16)
region_avgprice = df.groupby('Region')['average_price'].mean()
ax = region_avgprice.plot(kind='bar', color='#8B5A2B', alpha=0.5)

average = (region_avgprice)
labels = [f"{a:.0f}" for a in average]
ax.bar_label(ax.containers[0], labels=labels)

plt.yticks([]), plt.xticks(rotation=0), plt.xlabel(None)
plt.gca().set_frame_on(False)

plt.subplot(224)
plt.title('Average Rating by Region', color='#FF6347', weight='bold', fontsize=16)
region_avgrating = df.groupby('Region')['rating'].mean()
ax = region_avgrating.plot(kind='bar', color='#FF6347', alpha=0.5)

rating = (region_avgrating)
labels = [f"{r:.2f}" for r in rating]
ax.bar_label(ax.containers[0], labels=labels)

plt.yticks([]), plt.xticks(rotation=0), plt.xlabel(None)
plt.gca().set_frame_on(False)

plt.show()

import joblib

# Train your model (replace this with your actual training code)
model = "indian_restaurants.csv"  # Your trained model

# Save the model to a file
joblib.dump(model, 'my_model.pkl')